//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Draw"",
            ""id"": ""5df327bd-8f46-41bd-921b-8e175bf368e1"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3177c1e5-8d86-46a7-99f0-4fc3825bde8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e3f641ab-f45c-4147-b8bd-7679ecb71acc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GoBack"",
                    ""type"": ""Button"",
                    ""id"": ""1e45d43a-cf58-4594-b5a3-2e7b5cf17bc9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7fee5940-6793-412e-a7d1-74eabe3d1180"",
                    ""path"": ""<Touchscreen>/touch1/indirectTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31f9a513-a601-44c2-831a-7aa34e14e62f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""665d53f2-712e-4078-a0f9-43be29cdb9d5"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55f3b806-8026-454f-b30e-319eed9d5081"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88d05800-fc89-4228-9167-6186f3c36dfb"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GoBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Draw
        m_Draw = asset.FindActionMap("Draw", throwIfNotFound: true);
        m_Draw_Tap = m_Draw.FindAction("Tap", throwIfNotFound: true);
        m_Draw_Position = m_Draw.FindAction("Position", throwIfNotFound: true);
        m_Draw_GoBack = m_Draw.FindAction("GoBack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Draw
    private readonly InputActionMap m_Draw;
    private IDrawActions m_DrawActionsCallbackInterface;
    private readonly InputAction m_Draw_Tap;
    private readonly InputAction m_Draw_Position;
    private readonly InputAction m_Draw_GoBack;
    public struct DrawActions
    {
        private @GameInput m_Wrapper;
        public DrawActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tap => m_Wrapper.m_Draw_Tap;
        public InputAction @Position => m_Wrapper.m_Draw_Position;
        public InputAction @GoBack => m_Wrapper.m_Draw_GoBack;
        public InputActionMap Get() { return m_Wrapper.m_Draw; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DrawActions set) { return set.Get(); }
        public void SetCallbacks(IDrawActions instance)
        {
            if (m_Wrapper.m_DrawActionsCallbackInterface != null)
            {
                @Tap.started -= m_Wrapper.m_DrawActionsCallbackInterface.OnTap;
                @Tap.performed -= m_Wrapper.m_DrawActionsCallbackInterface.OnTap;
                @Tap.canceled -= m_Wrapper.m_DrawActionsCallbackInterface.OnTap;
                @Position.started -= m_Wrapper.m_DrawActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_DrawActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_DrawActionsCallbackInterface.OnPosition;
                @GoBack.started -= m_Wrapper.m_DrawActionsCallbackInterface.OnGoBack;
                @GoBack.performed -= m_Wrapper.m_DrawActionsCallbackInterface.OnGoBack;
                @GoBack.canceled -= m_Wrapper.m_DrawActionsCallbackInterface.OnGoBack;
            }
            m_Wrapper.m_DrawActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Tap.started += instance.OnTap;
                @Tap.performed += instance.OnTap;
                @Tap.canceled += instance.OnTap;
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @GoBack.started += instance.OnGoBack;
                @GoBack.performed += instance.OnGoBack;
                @GoBack.canceled += instance.OnGoBack;
            }
        }
    }
    public DrawActions @Draw => new DrawActions(this);
    public interface IDrawActions
    {
        void OnTap(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
        void OnGoBack(InputAction.CallbackContext context);
    }
}
